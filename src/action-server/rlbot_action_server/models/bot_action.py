# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rlbot_action_server.models.base_model_ import Model
from rlbot_action_server.models.strategic_category import StrategicCategory  # noqa: F401,E501
from rlbot_action_server import util


class BotAction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, strategic_category: StrategicCategory=None):  # noqa: E501
        """BotAction - a model defined in Swagger

        :param name: The name of this BotAction.  # noqa: E501
        :type name: str
        :param strategic_category: The strategic_category of this BotAction.  # noqa: E501
        :type strategic_category: StrategicCategory
        """
        self.swagger_types = {
            'name': str,
            'strategic_category': StrategicCategory
        }

        self.attribute_map = {
            'name': 'name',
            'strategic_category': 'strategicCategory'
        }
        self._name = name
        self._strategic_category = strategic_category

    @classmethod
    def from_dict(cls, dikt) -> 'BotAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BotAction of this BotAction.  # noqa: E501
        :rtype: BotAction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this BotAction.


        :return: The name of this BotAction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BotAction.


        :param name: The name of this BotAction.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def strategic_category(self) -> StrategicCategory:
        """Gets the strategic_category of this BotAction.


        :return: The strategic_category of this BotAction.
        :rtype: StrategicCategory
        """
        return self._strategic_category

    @strategic_category.setter
    def strategic_category(self, strategic_category: StrategicCategory):
        """Sets the strategic_category of this BotAction.


        :param strategic_category: The strategic_category of this BotAction.
        :type strategic_category: StrategicCategory
        """
        if strategic_category is None:
            raise ValueError("Invalid value for `strategic_category`, must not be `None`")  # noqa: E501

        self._strategic_category = strategic_category
